// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('heliotrope.services', []).value('version', '0.1');

  angular.module('knowledge.services', ['ngResource']).factory('GeneFrequencies', function($resource) {
    return $resource('/knowledge/api/queries/gene_frequencies', {}, {
      query: {
        method: 'GET'
      }
    });
  }).factory('Gene', function($resource) {
    return $resource('/knowledge/api/genes/:gene', {}, {
      query: {
        method: 'GET'
      }
    });
  }).factory('Variant', function($resource) {
    var Variant;
    Variant = $resource('/knowledge/api/variants/:variant', {}, {
      query: {
        method: 'GET'
      }
    });
    Variant.prototype.getOrderedPositions = function() {
      var positions;
      positions = this.data.sections.positions.data;
      positions.forEach(function(a) {
        if (a.codon === "-") {
          return a.codon = null;
        }
      });
      positions.sort(function(a, b) {
        var result, _ref, _ref1, _ref2, _ref3;
        result = 0;
        if (__indexOf.call(a, "sift") >= 0 && (_ref = !"sift", __indexOf.call(b, _ref) >= 0)) {
          result = -1;
        }
        if (__indexOf.call(b, "sift") >= 0 && (_ref1 = !"sift", __indexOf.call(a, _ref1) >= 0)) {
          result = 1;
        }
        if (result !== 0) {
          return result;
        }
        if (__indexOf.call(a, "polyphen") >= 0 && (_ref2 = !"polyphen", __indexOf.call(b, _ref2) >= 0)) {
          result = -1;
        }
        if (__indexOf.call(b, "polyphen") >= 0 && (_ref3 = !"polyphen", __indexOf.call(a, _ref3) >= 0)) {
          result = 1;
        }
        if (result !== 0) {
          return result;
        }
        result = Math.max(-1, Math.min(1, a.HGVSc.length - b.HGVSc.length));
        return result;
      });
      return positions;
    };
    return Variant;
  }).factory('Study', function($resource) {
    return $resource('/tracker/api/studies/:study', {}, {
      query: {
        method: 'GET'
      }
    });
  }).factory('Entity', function($resource) {
    var Entity;
    Entity = $resource('/tracker/api/studies/:study/:role/:identity', {}, {
      query: {
        method: 'GET'
      }
    });
    Entity.prototype.getField = function(x) {
      return this.data.values[x];
    };
    return Entity;
  }).factory('Views', function($resource) {
    return $resource('/tracker/api/views/:study/:role', {}, {
      query: {
        method: 'GET'
      }
    });
  });

}).call(this);
